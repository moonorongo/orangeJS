No hay DOCS de Animation...

Antes

    _fnPlot(x,y): Agregar un metodo que permita dibujar un punto en el Background de Orange... para testeos de tween
    _fnShowBoundary: implementar algo que para testear como arma el boundary que lo muestre con algun tipo de color y transparencia.

    
Class Tween

La clase Tween sirve para, dado una serie de puntos del layer, y una duracion (frames), la clase genera una interpolacion de todos esos puntos (en un principio lineal, despues se hara bezier, con swing y todo lo demas).

propiedades:
    _keys[]:    las posiciones que adoptar√°.
                Array de objetos { x, y, frame?} de momento frame no, que los espacios sean iguales.
                
    _cantFrames: la cantidad de cuadros de la animacion?? no se si vale la pena, estara en _frames.
    
    _frames[]: las posiciones x,y que ira devolviendo en cada requestFrame()
    
    _framePointer: el puntero del frame actual.
    
    
metodos:
    addKeys(key || array Keys): agrega las keys de la interpolacion, y genera los _frames correspondientes.
    
    requestFrame(): devuelve una posicion, e incrementa el puntero interno
    
    setDirection(dir): especifica si avanza o retrocede..
    
    
callbacks:     

    onStart(context): se llama al iniciar el primer requestFrame.
    onFinish(context): se llama al finalizar el tweening.
    
nada mas por hoy    
                

                
                
                
                
                
                
                


Demo FrenetikSpaceInvaders:
    
    - Nave Superior enemiga
    - Bloques

ERROR: no detecta bien cuando no hay mas naves... y queda un habilitado disparando tiros... raro.
    
    
    
    
    
    
Ir armando documentacion de esto.
ANTES DE NADA PROSEGUIR CON ESTO.

TODO:

    Corregir la parte en que toca la animacion de fin... ver los valores de speed y testear a bajas velocidades, para
    corroborar que esta haciendo bien... para SI esta bien, pero para otros games seguramente sera problematico.
    
ANTES DE SEGUIR CON LO DEMAS, DOCUMENTAR Y COMENTAR.    


Colisiones: 
    - agregar una propiedad que sea collisionPadding, en la que pueda especificar la cantidad de pixeles hacia adentro para restar
a la formula de colision
    - Agregar el tipo de colision que deseo detectar, si por boxes o por circles
    - Optimizar: que solo detecte probables candidatos. VER COMO.

Sprites: 
    - Seria interesante agregar algo para permitir rotaciones. MAS ADELANTE.

    
    
    
    
DEFINICIONES.
    



Animation:
una animacion es una secuencia que se arma con un ImageMap, la animacion puede tener secuencias de programacion que me permita
armar animaciones complejas, como por ejemplo:

Loops, loops infinitos, rebotes, saltos a otros estados (util para hacer un inicio y un fin de la animacion),
la posicion del frame va a depender de un contador interno global de Orange.

cada estado tendra un step size, que sera algo asi como cada cuanto se avanzara un frame.

cada animacion tiene un _frame interno, que es el que avanza, y se pone en 0 al cambiar de estado.

tiene que tener un metodo interno para devolver un frame, estado, y una referencia al Imagemap asignado.

